#!/usr/bin/perl -w

package RPM::Source::Transform::JPPImport;
use strict;
use warnings;
use Carp;
use Getopt::Long;
use File::Temp qw/tempfile/;
use RPM qw/vercmp/;
use RPM::Source::Transform;
use RPM::Source::Convert::Generic2ALT;
use RPM::Source::Convert::JPackage2ALT;

#Getopt::Long::Configure ("bundling");
our @ISA=q/RPM::Source::Transform/;

my ($jvm,$nozip,$nobz2);
my $usemavenplugins=0;
$RPM::Source::Transform::cleanup=0;
$RPM::Source::Transform::packager='auto';
$RPM::Source::Transform::nextrel='jppimport';
$RPM::Source::Transform::NEXTREL_METHOD{'jppimport'}=\&nextrel_jppimport;
push @RPM::Source::Transform::DEFAULT_OPTIONS,
    "jvm=s" => \$jvm,
    "nobz2"   => \$nobz2,
    "nozip"   => \$nozip;
$RPM::Source::Transform::defaultchangelog='- converted from JPackage by jppimport script';

my $converter=RPM::Source::Transform::JPPImport->new();
$converter->process_options();

$jvm||=6;
my $newjava='6';
if ($jvm and $jvm =~ /^4/) {
    $newjava = '1.7';
} elsif ($jvm and $jvm =~ /^5/) {
    $newjava = '5';
} elsif ($jvm and $jvm =~ /^6/) {
    $newjava = '6';
}
$usemavenplugins=1 if $RPM::Source::Transform::inrpm and $RPM::Source::Transform::inrpm=~m!/1.7/generic/!;

# all those hacks are just to have at hand the RPM::Source::Editor guts on crash.
my $tmp_dirname=basename($RPM::Source::Transform::inrpm);
$tmp_dirname=~s/.src.rpm//;
my $tmp_pwd= `pwd`;
chomp $tmp_pwd;
$tmp_dirname="$tmp_pwd/$tmp_dirname.$$";

$converter->transform(
    '-specargs' => [
	TMPDIR => $tmp_dirname,
	'CONVERT::GENERIC::NOINFO'=>0,
	'CONVERT::JPACKAGE::JVM'=>$jvm,
	'CONVERT::JPACKAGE::NOBZ2'=>$nobz2, 
	'CONVERT::JPACKAGE::NOZIP'=>$nozip, 
	'CONVERT::JPACKAGE::USEMAVENPLAGINS'=>$usemavenplugins,
    ]
);

sub usage {
    my ($self)=@_;
    $self->SUPER::usage();
    print "--jvm jvm JVM required for the build. values are: 4 4.2 5 6. Default is java 6.\n";
}

sub verify_options {
    my ($self)=@_;
    $self->SUPER::verify_options();
#    if (!$backportver) {
#	print "ERROR: -Mdistrover is required!\n";
#	$self->usage();
#	exit (5);
#    }
}

sub nextrel_jppimport {
    my ($rel,$spec,$parent)=@_;
    my $jpprel = $spec->get_section('package','')->get_tag('Release');
    my $jppver = $spec->get_section('package','')->get_tag('Version');
# $jppsubrel is used to keep branch of fedora or mandriva
    my $jppsubrel='';
# for new jpackage 5.0
    $jpprel=~s/\%\{dist\}//;
# for fedora-based imports (hack :()
    if ($jpprel=~/\%\{\?dist\}/) {
	$jpprel=~s/\%\{\?dist\}//;
	$jpprel=~s/jpp(\.\d+)?//;
	$jppsubrel=$1 if $1;
    }
    $jpprel=~s/jpp\d.\d$//;
    $jpprel=~s/.jpp5$//;
    $jpprel=~s/jpp//;
    
    my $altrel="alt1";
    if ($parent) {
	$altrel = $parent->get_section('package','')->get_tag('Release');
	my $altver = $parent->get_section('package','')->get_tag('Version');
	my $vercmp = `rpmvercmp $altver $jppver`;
	chomp $vercmp;
	if ($altrel=~/^alt([^_]+)_(.+)jpp(\d(?:\.\d)?)?$/) {
	    my $relcore = $1;
	    my $jppfrom = $2;
	    my $java= $3;
	    $java||=0;
	    my $subrel='';
	    $subrel=$1 if ($relcore=~s/(\.\d+)$//);
	    # hack -- cleanup (undefined in jpp) macro in alt release:
	    $relcore=~s/.?\%\w+//g;
	    $relcore=~s/.?\%\{\w+\}+//g;
	    print STDERR "new alt release: jpprel=$jpprel rel=$relcore subrel=$subrel jppfrom=$jppfrom jppsubrel=$jppsubrel $java\n" if $RPM::Source::Transform::verbose>1;
	    if ($relcore=~/^0\./ or $vercmp != 0) {
		print STDERR "set rel=1\n" if $RPM::Source::Transform::verbose>1;
		$relcore=1;
	    } elsif (($jppfrom eq $jpprel) and $subrel and $jppsubrel and $subrel < $jppsubrel) {
		# nothing to do
		print STDERR "nothing to do: new subrel is higher\n" if $RPM::Source::Transform::verbose>1;
	    } elsif (not $subrel and &vercmp(0,$jpprel,0,$jppfrom) >0) {
		# nothing to do
		print STDERR "nothing to do: new jppfrom is higher\n" if $RPM::Source::Transform::verbose>1;
	    } elsif (($jppfrom eq $jpprel) and not $subrel and $java and ($java < $newjava)) {
		# nothing to do
		print STDERR "nothing to do: new java is higher\n" if $RPM::Source::Transform::verbose>1;
	    } else {
		$relcore=~/^(\d+)/;
		$relcore=$1+1;
		print STDERR "++rel=$relcore\n" if $RPM::Source::Transform::verbose>1;
	    }
	    $altrel='alt'.$relcore;
	} else {
	    print STDERR "first alt release $altrel\n" if $RPM::Source::Transform::verbose>1;
	    $altrel=~s/.?\%\w+//g;
	    $altrel=~s/.?\%\{\w+\}+//g;
	    if ($altrel=~/^alt0\./ or $vercmp != 0) {
		$altrel='alt1';
	    } elsif ($altrel=~/^alt(\d+)\./) {
		$altrel='alt'.($1+1);
	    }
	}
	my $newrel = $altrel.$jppsubrel."_".$jpprel.'jpp'.$newjava;
	return $newrel;
    }
}

sub callback_hooks {
    my ($self,$spec,$parent)=@_;
    #map {print STDERR $_->describe(1)} $spec->get_sections();
    print STDERR "entering alt_generic_fixes\n" if $RPM::Source::Transform::verbose>1;
    &RPM::Source::Convert::Generic2ALT::alt_generic_fix($spec);
    print STDERR "done alt_generic_fixes\n" if $RPM::Source::Transform::verbose>1;
    #map {print STDERR $_->describe(1)} $spec->get_sections();
    &RPM::Source::Convert::JPackage2ALT::jpp_specific_fix($spec);
    print STDERR "done jpp_specific_fixes\n" if $RPM::Source::Transform::verbose>1;
    #map {print STDERR $_->describe(1)} $spec->get_sections();
}

__END__
