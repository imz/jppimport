#!/usr/bin/perl -w

package RPM::Source::Convert::ALTLinuxJPPImport;
use strict;
use warnings;

use File::Temp qw/tempfile/;
use RPM qw/vercmp/;
use RPM::Source::Convert;
use RPM::Source::Convert::Plugins::JPackage2ALT;
our @ISA=q/RPM::Source::Convert/;

$RPM::Source::Transform::nextrel='jppimport';
$RPM::Source::Transform::NEXTREL_METHOD{'jppimport'}=\&nextrel_jppimport;
$RPM::Source::Transform::INITREL_METHOD{'jppimport'}=\&initrel_jppimport;
$RPM::Source::Transform::defaultchangelog='- converted from JPackage by jppimport script';
$DistroMap::default_originrepo='jpackage';

# TODO: share the stem with RPM::Source::Convert::Plugins::JPackage2ALT?
my $jvm=7;
push @RPM::Source::Transform::LONGOPT,
    "jvm=s" => \$jvm;

# keep in util
$RPM::Source::Transform::cleanup=0;
$RPM::Source::Transform::packager='auto';

my $converter=RPM::Source::Convert::ALTLinuxJPPImport->new();
$converter->transform();

sub usage {
    my ($self)=@_;
    $self->SUPER::usage();
    print "--jvm jvm JVM required for the build. values are: 5 6 7. Default is java 6.\n";
}

sub process_options {
    my ($self)=@_;
    $self->SUPER::process_options();
    $RPM::Source::Convert::Plugins::JPackage2ALT::jvm=$jvm;
}

sub verify_options {
    my ($self)=@_;
    $self->SUPER::verify_options();
    if (not $jvm or ($jvm <4 or $jvm > 7)) {
	print "ERROR: invalid jvm option $jvm\n";
	$self->usage();
	exit (5);
    }
}

sub verify_args {
    my ($self)=@_;
    $self->SUPER::verify_args();
    if (grep {$_->[1] =~ m!/jpackage/!} @RPM::Source::Transform::INSRC) {
	print STDERR "I: jpackage mode\n";
	my %map_jpp=qw/
maven-plugins	maven1-plugins
maven	maven1
maven-javadoc	maven1-javadoc
maven-manual	maven1-manual
maven-plugin-announcement	maven1-plugin-announcement
maven-plugin-antlr	maven1-plugin-antlr
maven-plugin-appserver	maven1-plugin-appserver
maven-plugin-aspectj	maven1-plugin-aspectj
maven-plugin-aspectwerkz	maven1-plugin-aspectwerkz
maven-plugin-cactus-jcoverage-integration	maven1-plugin-cactus-jcoverage-integration
maven-plugin-caller	maven1-plugin-caller
maven-plugin-castor	maven1-plugin-castor
maven-plugin-changelog	maven1-plugin-changelog
maven-plugin-changes	maven1-plugin-changes
maven-plugin-checkstyle	maven1-plugin-checkstyle
maven-plugin-cruisecontrol	maven1-plugin-cruisecontrol
maven-plugin-dashboard	maven1-plugin-dashboard
maven-plugin-developer-activity	maven1-plugin-developer-activity
maven-plugin-dist	maven1-plugin-dist
maven-plugin-docbook	maven1-plugin-docbook
maven-plugin-ear	maven1-plugin-ear
maven-plugin-eclipse	maven1-plugin-eclipse
maven-plugin-ejb	maven1-plugin-ejb
maven-plugin-faq	maven1-plugin-faq
maven-plugin-file-activity	maven1-plugin-file-activity
maven-plugin-genapp	maven1-plugin-genapp
maven-plugin-gump	maven1-plugin-gump
maven-plugin-html2xdoc	maven1-plugin-html2xdoc
maven-plugin-idea	maven1-plugin-idea
maven-plugin-itest	maven1-plugin-itest
maven-plugin-j2ee	maven1-plugin-j2ee
maven-plugin-jalopy	maven1-plugin-jalopy
maven-plugin-jboss	maven1-plugin-jboss
maven-plugin-jbuilder	maven1-plugin-jbuilder
maven-plugin-jcoverage	maven1-plugin-jcoverage
maven-plugin-jdee	maven1-plugin-jdee
maven-plugin-jdepend	maven1-plugin-jdepend
maven-plugin-jdeveloper	maven1-plugin-jdeveloper
maven-plugin-jdiff	maven1-plugin-jdiff
maven-plugin-jellydoc	maven1-plugin-jellydoc
maven-plugin-jetty	maven1-plugin-jetty
maven-plugin-jira	maven1-plugin-jira
maven-plugin-jnlp	maven1-plugin-jnlp
maven-plugin-junitdoclet	maven1-plugin-junitdoclet
maven-plugin-jxr	maven1-plugin-jxr
maven-plugin-latex	maven1-plugin-latex
maven-plugin-latka	maven1-plugin-latka
maven-plugin-license	maven1-plugin-license
maven-plugin-linkcheck	maven1-plugin-linkcheck
maven-plugin-modello	maven1-plugin-modello
maven-plugin-multichanges	maven1-plugin-multichanges
maven-plugin-multiproject	maven1-plugin-multiproject
maven-plugin-native	maven1-plugin-native
maven-plugin-nsis	maven1-plugin-nsis
maven-plugin-pdf	maven1-plugin-pdf
maven-plugin-pmd	maven1-plugin-pmd
maven-plugin-rar	maven1-plugin-rar
maven-plugin-release	maven1-plugin-release
maven-plugin-repository	maven1-plugin-repository
maven-plugins-base	maven1-plugins-base
maven-plugin-scm	maven1-plugin-scm
maven-plugin-shell	maven1-plugin-shell
maven-plugin-site	maven1-plugin-site
maven-plugin-source	maven1-plugin-source
maven-plugin-struts	maven1-plugin-struts
maven-plugin-tasklist	maven1-plugin-tasklist
maven-plugin-test	maven1-plugin-test
maven-plugin-tjdo	maven1-plugin-tjdo
maven-plugin-touchstone	maven1-plugin-touchstone
maven-plugin-touchstone-partner	maven1-plugin-touchstone-partner
maven-plugin-uberjar	maven1-plugin-uberjar
maven-plugin-vdoclet	maven1-plugin-vdoclet
maven-plugin-war	maven1-plugin-war
maven-plugin-webserver	maven1-plugin-webserver
maven-plugin-webstart	maven1-plugin-webstart
maven-plugin-wizard	maven1-plugin-wizard
maven-plugin-xdoc	maven1-plugin-xdoc

aqute-bndlib	aqute-bnd
/;
	map {$RPM::Source::Convert::Plugins::DistroMap::Packages::DEP_SUBST{$_}=$map_jpp{$_}} keys (%map_jpp);
    } elsif (grep {$_->[1] =~ m!/fedora/linux/!} @RPM::Source::Transform::INSRC) {
	print STDERR "I: fedora mode\n";
	my %map_jpp=qw/
-maven-release-plugin	maven-release
-maven-plugin-jxr	maven-jxr
/;
	map {$RPM::Source::Convert::Plugins::DistroMap::Packages::DEP_SUBST{$_}=$map_jpp{$_}} keys (%map_jpp);
    }
}

sub initrel_jppimport {
    my ($spec,$parent)=@_;
    my $jpprel = $spec->get_section('package','')->get_tag('Release');
    die "jpp release is undefined" unless defined $jpprel;
    warn "initrel_jppimport:alt_ found! wrong tool is used? " if $jpprel=~/^alt/;
    return 'alt'.($1+1).$2 if $jpprel=~/^alt(\d+)[^_]*(_.+jpp.*)$/;

# $jppsubrel is used to keep branch of fedora or mandriva
    my $jppsubrel='';
# for new jpackage 5.0
    $jpprel=~s/\%\{dist\}//;
# for fedora-based imports (hack :()
    if ($jpprel=~/\%\{\?dist\}/) {
	$jpprel=~s/\%\{\?dist\}//;
	$jpprel=~s/jpp(\.\d+)?//;
	$jppsubrel=$1 if $1;
    }
    $jpprel=~s/jpp\d.\d$//;
    $jpprel=~s/.jpp5$//;
    $jpprel=~s/jpp//;
  
    my $altrel="alt1";
    my $newrel = $altrel.$jppsubrel."_".$jpprel.'jpp'.$jvm;
    return $newrel;
}

sub nextrel_jppimport {
    my ($rel,$spec,$parent)=@_;
    my $jppmain= $spec->get_section('package','');
    my $jppver = $jppmain->get_tag('Version');
    my $jpprel = $jppmain->get_tag('Release');
    warn "nextrel_jppimport:alt_ found! wrong tool is used? " if $jpprel=~/^alt/;
    die "jpp release is undefined" unless defined $jpprel;
# $jppsubrel is used to keep branch of fedora or mandriva
    my $jppsubrel='';
# for new jpackage 5.0
    $jpprel=~s/\%\{dist\}//;
# for fedora-based imports (hack :()
    if ($jpprel=~/\%\{\?dist\}/) {
	$jpprel=~s/\%\{\?dist\}//;
	$jpprel=~s/jpp(\.\d+)?//;
	$jppsubrel=$1 if $1;
    }
    $jpprel=~s/jpp\d.\d$//;
    $jpprel=~s/.jpp5$//;
    $jpprel=~s/jpp//;
    
    my $altrel="alt1";
    if ($parent) {
	$altrel = $parent->get_section('package','')->get_tag('Release');
	my $altver = $parent->get_section('package','')->get_tag('Version');
	my $vercmp = `rpmvercmp $altver $jppver`;
	chomp $vercmp;
	if ($altrel=~/^alt([^_]+)_(.+)jpp(\d(?:\.\d)?)?$/) {
	    my $relcore = $1;
	    my $jppfrom = $2;
	    my $java= $3;
	    $java||=0;
	    my $subrel='';
	    $subrel=$1 if ($relcore=~s/(\.\d+)$//);
	    # hack -- cleanup (undefined in jpp) macro in alt release:
	    $relcore=~s/.?\%\w+//g;
	    $relcore=~s/.?\%\{\w+\}+//g;
	    print STDERR "new alt release: jpprel=$jpprel rel=$relcore subrel=$subrel jppfrom=$jppfrom jppsubrel=$jppsubrel $java\n" if $RPM::Source::Transform::verbose>1;
	    if ($relcore=~/^0\./ or $vercmp != 0) {
		print STDERR "set rel=1\n" if $RPM::Source::Transform::verbose>1;
		$relcore=1;
	    } elsif (($jppfrom eq $jpprel) and $subrel and $jppsubrel and $subrel < $jppsubrel) {
		# nothing to do
		print STDERR "nothing to do: new subrel is higher\n" if $RPM::Source::Transform::verbose>1;
	    } elsif (not $subrel and &vercmp(0,$jpprel,0,$jppfrom) >0) {
		# nothing to do
		print STDERR "nothing to do: new jppfrom is higher\n" if $RPM::Source::Transform::verbose>1;
	    } elsif (($jppfrom eq $jpprel) and not $subrel and $java and ($java < $jvm)) {
		# nothing to do
		print STDERR "nothing to do: new java is higher\n" if $RPM::Source::Transform::verbose>1;
	    } else {
		$relcore=~/^(\d+)/;
		$relcore=$1+1;
		print STDERR "++rel=$relcore\n" if $RPM::Source::Transform::verbose>1;
	    }
	    $altrel='alt'.$relcore;
	} else {
	    print STDERR "first alt release $altrel\n" if $RPM::Source::Transform::verbose>1;
	    $altrel=~s/.?\%\w+//g;
	    $altrel=~s/.?\%\{\w+\}+//g;
	    if ($altrel=~/^alt0\./ or $vercmp != 0) {
		$altrel='alt1';
	    } elsif ($altrel=~/^alt(\d+)\./) {
		$altrel='alt'.($1+1);
	    }
	}
    }
    my $newrel = $altrel.$jppsubrel."_".$jpprel.'jpp'.$jvm;
    return $newrel;
}

__END__
