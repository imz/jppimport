#!/usr/bin/perl -w

use strict;
use warnings;
use Carp;
use Getopt::Long;
use File::Basename;
use File::Temp qw/tempfile/;
use RPM qw/vercmp/;
use RPM::Source::Editor;
use RPM::Source::Convert::Generic2ALT;
use RPM::Source::Convert::JPackage2ALT;
use RPM::Source::Convert::MergeALT;

my ($inrpm,$parentrpm,$inspec,$parentspec,@hooks,$changelog,$release,$epoch,$rename,$nobz2,$nozip);
my $jvm;
my $packager='auto';
my $verbose=1;
my $defaulthook=1;
my $usemavenplugins=0;
my $cleanup=0;
my $outputdir='.';
my $patchdir=dirname($0)."/patches";

my $result = GetOptions ("rpm=s" => \$inrpm,
		      "spec=s" => \$inspec,
		      "parent-spec=s"   => \$parentspec,
		      "parent-rpm=s"   => \$parentrpm,
		      "outdir=s"   => \$outputdir,
		      "jvm=s" => \$jvm,
		      "packager=s"   => \$packager,
		      "hook=s"   => \@hooks,
		      "defaulthook!"   => \$defaulthook,
		      "changelog=s"   => \$changelog,
		      "rename=s"   => \$rename,
		      "cleanup!"   => \$cleanup,
		      "release=s"   => \$release,
		      "epoch=s"   => \$epoch,
		      "nobz2"   => \$nobz2,
		      "nozip"   => \$nozip,
		      "verbose+"  => \$verbose);
my ($parent,$spec);

if (! $inrpm && ! $inspec) {
    print "ERROR: one of --jpp | --jppspec is required!\n";
    print "options:
--jpp /path/to/jpackage.src.rpm
--alt /path/to/altlinux.src.rpm
--jppspec /path/to/jpackage.spec
--altspec /path/to/altlinux.spec
--hook /path/to/hook to be called on resulting spec file
--jvm jvm JVM required for the build. by default, it is java-1.4.2.
  values are: 4 5 6 4.2 5.0 6.0
--out /path/to/output_dir
--changelog '- message'
--release 'release' - if we need to adjust the package's release

usage examples:
* convert srpm:
jppimport --alt Sisyphus/antlr-2.7.6-alt1.src.rpm --jpp jpackage/1.7/generic/free/SRPMS/antlr-2.7.7-1jpp.src.rpm
* convert srpm without history:
jppimport --jpp jpackage/1.7/generic/free/SRPMS/antlr-2.7.7-1jpp.src.rpm --srpmdir ~/OUT
* convert spec:
jppimport --altspec antlr.spec --jppspec jpackage/1.7/generic/free/SPECS/antlr.spec
";
    exit (64);
}

$usemavenplugins=1 if $inrpm and $inrpm=~m!/1.7/generic/!;

# all those hacks are just to have at hand the RPM::Source::Editor guts on crash.
my $tmp_dirname=basename($inrpm);
$tmp_dirname=~s/.src.rpm//;
my $tmp_pwd= `pwd`;
chomp $tmp_pwd;
$tmp_dirname="$tmp_pwd/$tmp_dirname.$$";

$spec=RPM::Source::Editor->new(
    SOURCERPM => $inrpm, 
    SPECFILE=> $inspec, 
    OUTPUTDIR=> $outputdir, 
    PATCHDIR=>$patchdir, 
    VERBOSE=> $verbose,
    CLEANUP=> $cleanup,
    CHANGELOG=>'- converted from JPackage by jppimport script',
    TMPDIR => $tmp_dirname,
    'CONVERT::GENERIC::NOINFO'=>0,
    'CONVERT::JPACKAGE::JVM'=>$jvm,
    'CONVERT::JPACKAGE::NOBZ2'=>$nobz2, 
    'CONVERT::JPACKAGE::NOZIP'=>$nozip, 
    'CONVERT::JPACKAGE::USEMAVENPLAGINS'=>$usemavenplugins,
);
$jvm||=6;

my $jppepoch = $spec->get_section('package','')->get_tag('Epoch');
my $jpprel = $spec->get_section('package','')->get_tag('Release');
my $jppver = $spec->get_section('package','')->get_tag('Version');
# $jppsubrel is used to keep branch of fedora or mandriva
my $jppsubrel='';
# for new jpackage 5.0
$jpprel=~s/\%\{dist\}//;
# for fedora-based imports (hack :()
if ($jpprel=~/\%\{\?dist\}/) {
    $jpprel=~s/\%\{\?dist\}//;
    $jpprel=~s/jpp(\.\d+)?//;
    $jppsubrel=$1 if $1;
}
$jpprel=~s/jpp\d.\d$//;
$jpprel=~s/.jpp5$//;
$jpprel=~s/jpp//;

my $newjava='6';
if ($jvm and $jvm =~ /^4/) {
    $newjava = '1.7';
} elsif ($jvm and $jvm =~ /^5/) {
    $newjava = '5';
} elsif ($jvm and $jvm =~ /^6/) {
    $newjava = '6';
}

my $parentepoch;
my $altrel="alt1";
if ($parentrpm || $parentspec) {
    $parent=RPM::Source::Editor->new(SOURCERPM => $parentrpm, SPECFILE => $parentspec, VERBOSE=> $verbose);
    $parentepoch = $parent->get_section('package','')->get_tag('Epoch');
    $altrel = $parent->get_section('package','')->get_tag('Release');
    my $altver = $parent->get_section('package','')->get_tag('Version');
    my $vercmp = `rpmvercmp $altver $jppver`;
    chomp $vercmp;
    if ($altrel=~/^alt([^_]+)_(.+)jpp(\d(?:\.\d)?)?$/) {
	my $relcore = $1;
	my $jppfrom = $2;
	my $java= $3;
	$java||=0;
	my $subrel='';
	$subrel=$1 if ($relcore=~s/(\.\d+)$//);
	# hack -- cleanup (undefined in jpp) macro in alt release:
	$relcore=~s/.?\%\w+//g;
	$relcore=~s/.?\%\{\w+\}+//g;
	print STDERR "new alt release: jpprel=$jpprel rel=$relcore subrel=$subrel jppfrom=$jppfrom jppsubrel=$jppsubrel $java\n" if $verbose>1;
	if ($relcore=~/^0\./ or $vercmp != 0) {
	    print STDERR "set rel=1\n" if $verbose>1;
	    $relcore=1;
	} elsif (($jppfrom eq $jpprel) and $subrel and $jppsubrel and $subrel < $jppsubrel) {
	    # nothing to do
	    print STDERR "nothing to do: new subrel is higher\n" if $verbose>1;
	} elsif (not $subrel and &vercmp(0,$jpprel,0,$jppfrom) >0) {
	    # nothing to do
	    print STDERR "nothing to do: new jppfrom is higher\n" if $verbose>1;
	} elsif (($jppfrom eq $jpprel) and not $subrel and $java and ($java < $newjava)) {
	    # nothing to do
	    print STDERR "nothing to do: new java is higher\n" if $verbose>1;
	} else {
	    $relcore=~/^(\d+)/;
	    $relcore=$1+1;
	    print STDERR "++rel=$relcore\n" if $verbose>1;
	}
	$altrel='alt'.$relcore;
    } else {
	print STDERR "first alt release $altrel\n" if $verbose>1;
	$altrel=~s/.?\%\w+//g;
	$altrel=~s/.?\%\{\w+\}+//g;
	if ($altrel=~/^alt0\./ or $vercmp != 0) {
	    $altrel='alt1';
	} elsif ($altrel=~/^alt(\d+)\./) {
	    $altrel='alt'.($1+1);
	}
    }
    if ($packager eq 'auto') {
	my $altpackager=$parent->get_section('package','')->get_tag('Packager');
	$packager=$altpackager if $altpackager;
    }

    print STDERR "entering alt_generic_merge\n" if $verbose>1;
    &RPM::Source::Convert::MergeALT::alt_generic_merge($spec,$parent);
    print STDERR "done alt_generic_merge\n" if $verbose>1;

    # cleanup is performed by default in destructor
    $parent->cleanup();
    # but we still use $parent later
    #$parent=undef;

    unless ($epoch) {
	if (defined $parentepoch) {
	    $epoch=$parentepoch if ! defined $jppepoch || $parentepoch > $jppepoch;
	}
    }
}



# our -- hack ?
our $jpptoolsdir=dirname($0);
# for cross-references in hooks
push @INC, $jpptoolsdir."/hooks", $jpptoolsdir."/common";

if (0==@hooks or $defaulthook) {
    # looking for default hook
    my $name = $spec->get_section('package','')->get_tag('Name');
    $name=$rename if $rename;
    my $defhook="$jpptoolsdir/hooks/$name.pl";
    # macro_expansion should be here
    #print "looking for default hook $defhook\n";
    push @hooks, $defhook if (-e $defhook);
}

our @SPECHOOKS;
our @PREHOOKS;
if (@hooks) {
    foreach my $hook (@hooks) {
	require $hook;
	die "script $hook does not have a valid hook!\n" unless @PREHOOKS or @SPECHOOKS;
	if (@PREHOOKS) {
	    $spec->{WARN_NOTAPPLIED}++;
	    map {&$_($spec,$parent)} @PREHOOKS;
	    $spec->{WARN_NOTAPPLIED}--;
	}
    }
}

$spec->rename_package($rename) if $rename;

#map {print STDERR $_->describe(1)} $spec->get_sections();
print STDERR "entering alt_generic_fixes\n" if $verbose>1;
&RPM::Source::Convert::Generic2ALT::alt_generic_fix($spec);
print STDERR "done alt_generic_fixes\n" if $verbose>1;
#map {print STDERR $_->describe(1)} $spec->get_sections();
&RPM::Source::Convert::JPackage2ALT::jpp_specific_fix($spec);
print STDERR "done jpp_specific_fixes\n" if $verbose>1;
#map {print STDERR $_->describe(1)} $spec->get_sections();


my $newrel = $altrel.$jppsubrel."_".$jpprel.'jpp'.$newjava;
$newrel=$release if ($release);
$spec->get_section('package','')->set_tag('Release',$newrel);

if (@hooks) {
    if (@SPECHOOKS) {
	$spec->{WARN_NOTAPPLIED}++;
	map {&$_($spec,$parent)} @SPECHOOKS;
	$spec->{WARN_NOTAPPLIED}--;
    }
}

if ($parent) {
    $spec->get_section('changelog')->set_body($parent->get_section('changelog')->get_body());
}

if ($changelog) {
    $spec->set_default_changelog($changelog);
}

if ($packager eq 'auto') {
    $packager=$spec->macros()->macro_subst('%{packager}');
}

if ($packager) {
    if ($packager ne 'none') {
	$spec->get_section('package','')->set_tag('Packager',$packager);
    } else {
	$spec->get_section('package','')->clear_tag('Packager');
    }
}

if (defined $epoch) {
    $spec->get_section('package','')->set_tag('Epoch',$epoch);
}

$spec->add_changelog();

print $spec->get_spec() if $inspec or $verbose>3;
$spec->write_rpm() if $inrpm;

$spec->cleanup();

